// <auto-generated />
using System;
using CBF.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CBF.Infra.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CBF.Domain.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Reference")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tournament", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamDestinyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamOriginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamDestinyId");

                    b.HasIndex("TeamOriginId");

                    b.ToTable("Transfer", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Player", b =>
                {
                    b.HasOne("CBF.Domain.Team", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CBF.Domain.Tournament", b =>
                {
                    b.OwnsMany("CBF.Domain.Tournament.Matches#CBF.Domain.Match", "Matches", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("AwayTeamId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("HomeTeamId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Reference")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("TournamentId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("AwayTeamId");

                            b1.HasIndex("HomeTeamId");

                            b1.HasIndex("TournamentId");

                            b1.ToTable("Match", (string)null);

                            b1.HasOne("CBF.Domain.Team", "AwayTeam")
                                .WithMany()
                                .HasForeignKey("AwayTeamId");

                            b1.HasOne("CBF.Domain.Team", "HomeTeam")
                                .WithMany()
                                .HasForeignKey("HomeTeamId");

                            b1.WithOwner()
                                .HasForeignKey("TournamentId");

                            b1.OwnsMany("CBF.Domain.Tournament.Matches#CBF.Domain.Match.Events#CBF.Domain.Event", "Events", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("MatchId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Message")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Reference")
                                        .IsRequired()
                                        .HasColumnType("varchar(300)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("MatchId");

                                    b2.ToTable("Event", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("MatchId");
                                });

                            b1.Navigation("AwayTeam");

                            b1.Navigation("Events");

                            b1.Navigation("HomeTeam");
                        });

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("CBF.Domain.Transfer", b =>
                {
                    b.HasOne("CBF.Domain.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("CBF.Domain.Team", "TeamDestiny")
                        .WithMany()
                        .HasForeignKey("TeamDestinyId");

                    b.HasOne("CBF.Domain.Team", "TeamOrigin")
                        .WithMany()
                        .HasForeignKey("TeamOriginId");

                    b.Navigation("Player");

                    b.Navigation("TeamDestiny");

                    b.Navigation("TeamOrigin");
                });

            modelBuilder.Entity("CBF.Domain.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
